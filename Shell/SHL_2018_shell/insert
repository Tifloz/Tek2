#!/bin/sh

datas_checker() {
    local TABLE="$1"
    for (( i=0; i<${#CONTENT}; i++ )); do
        update_level "${CONTENT:$i:1}"

        if [[ "${CONTENT:$i:1}" == "\"" ]] \
            && [[ "{[," == *"${CONTENT:$i-1:1}"* ]] \
            && [[ ${BRACKET_LEVEL} -eq 1 ]] && [[ $SQUARE_BRACKET_LEVEL -eq 0 ]]; then
            TOKEN=$(echo "${CONTENT:$i}" | cut -d"\"" -f2)

            if [[ ${TOKEN} == "data_"* ]]; then
                DESCRIBED_TABLE=$(echo ${TOKEN} | cut -d"_" -f2)

                if [[ ${DESCRIBED_TABLE} == ${TABLE} ]]; then
                    return 0
                fi
            fi
        fi
    done
    return 1
}

no_data() {
    local TABLE="$1"
    for (( i=0; i<${#CONTENT}; i++ )); do
        update_level "${CONTENT:$i:1}"

        if [[ "${CONTENT:$i:1}" == "\"" ]] \
            && [[ "{[," == *"${CONTENT:$i-1:1}"* ]] \
            && [[ ${BRACKET_LEVEL} -eq 1 ]] && [[ ${SQUARE_BRACKET_LEVEL} -eq 0 ]]; then
            TOKEN=$(echo "${CONTENT:$i}" | cut -d"\"" -f2)

            if [[ $TOKEN == "data_"* ]]; then
                DESCRIBED_TABLE=$(echo TOKEN | cut -d"_" -f2)

                if [[ ${DESCRIBED_TABLE} == ${TABLE} ]]; then
                    TABLE_CONTENT=$(echo ${CONTENT:$i} | cut -d"[" -f2 | cut -d"]" -f1)
                    if [[ -z ${TABLE_CONTENT} ]]; then
                        return 0
                    fi
                    return 1
                fi
            fi
        fi
    done
}

insert_is_valid() {
    local TABLE="$1"
    shift
     IFS="," read -r -a ARGS <<< $@

    DESCRIBED_TABLE=($(table_describe ${TABLE}))

    if [[ -z "${DESCRIBED_TABLE[@]}" ]]; then
        error "Error: Unknown table \"$TABLE\""
        exit 1
    fi

    for ((i=0; i<${#ARGS[@]}; i++)); do
        KEY=$(echo ${ARGS[$i]} | cut -d"=" -f1)
        declare -i TMP=0
        for ((j=0; j<${#DESCRIBED_TABLE[@]}; j++)); do
            if [[ ${KEY} == ${DESCRIBED_TABLE[$j]} ]]; then
                TMP=1
            fi
        done

        if [[ ${TMP} -eq 0 ]]; then
            error "Error: No field \"$KEY\" exist in table \"$TABLE\""
            exit 1
        fi
    done
}

insert() {
    local TABLE="$1"
    shift
    local ARGUMENTS="$@"

    insert_is_valid ${TABLE} ${ARGUMENTS}

    if [[ -z "$TABLE" ]]; then
        error "Error: Missing name for the table to insert"
        exit 1
    fi

    if ! datas_checker ${TABLE}; then
        for (( i=0; i<${#CONTENT}; i++ )); do
            update_level "${CONTENT:$i:1}"

            if [[ ${BRACKET_LEVEL} -eq 1 ]] && [[ $SQUARE_BRACKET_LEVEL -eq 0 ]]; then
                CONTENT="${CONTENT:0:$i+1}\"data_$TABLE\":[],${CONTENT:$i+1}"
                break
            fi
        done
    fi

    BRACKET_LEVEL=0
    SQUARE_BRACKET_LEVEL=0

    if no_data ${TABLE}; then
        BRACKET_LEVEL=0
        SQUARE_BRACKET_LEVEL=0

        for (( i=0; i<${#CONTENT}; i++ )); do
            update_level "${CONTENT:$i:1}"
            if [[ "${CONTENT:$i:1}" == "\"" ]] \
                && [[ "{[," == *"${CONTENT:$i-1:1}"* ]] \
                && [[ ${BRACKET_LEVEL} -eq 1 ]] && [[ ${SQUARE_BRACKET_LEVEL} -eq 0 ]]; then
                TOKEN=$(echo "${CONTENT:$i}" | cut -d"\"" -f2)
                if [[ ${TOKEN} == "data_"* ]]; then
                    DESCRIBED_TABLE=$(echo ${TOKEN} | cut -d"_" -f2)

                    if [[ ${DESCRIBED_TABLE} == ${TABLE} ]]; then
                        for (( j=i; j<${#CONTENT}; j++ )); do
                            if [[ "${CONTENT:$j:1}" == "[" ]]; then
                                ENTRY=$(write_entry "$ARGUMENTS")
                                CONTENT="${CONTENT:0:$j+1}{$ENTRY}${CONTENT:$j+1}"
                                return
                            fi
                        done
                    fi
                fi
            fi
        done
        return
    fi

    BRACKET_LEVEL=0
    SQUARE_BRACKET_LEVEL=0

    SAVED_BR_LEVEL=0

    for (( i=0; i<${#CONTENT}; i++ )); do
        update_level "${CONTENT:$i:1}"

        if [[ "${CONTENT:$i:1}" == "\"" ]] \
            && [[ "{[," == *"${CONTENT:$i-1:1}"* ]] \
            && [[ ${BRACKET_LEVEL} -eq 1 ]] && [[ ${SQUARE_BRACKET_LEVEL} -eq 0 ]]; then
            TOKEN=$(echo "${CONTENT:$i}" | cut -d"\"" -f2)

            if [[ ${TOKEN} == "data_"* ]]; then
                DESCRIBED_TABLE=$(echo ${TOKEN} | cut -d"_" -f2)

                if [[ ${DESCRIBED_TABLE} == ${TABLE} ]]; then
                    for (( j=i; j<${#CONTENT}; j++ )); do
                        update_level "${CONTENT:$j:1}"
                        if [[ "${CONTENT:$j:1}" == "[" ]]; then
                            SAVED_BR_LEVEL=${SQUARE_BRACKET_LEVEL}

                            for (( k=j+1; k<${#CONTENT}; k++ )); do
                                update_level "${CONTENT:$k:1}"
                                if [[ ${SAVED_BR_LEVEL} != ${SQUARE_BRACKET_LEVEL} ]]; then
                                    break
                                fi
                            done
                            ENTRY=$(write_entry "$ARGUMENTS")
                            CONTENT="${CONTENT:0:$k},{$ENTRY}${CONTENT:$k}"
                            return
                        fi
                    done
                fi
            fi
        fi
    done
}